// ComputerVision.cpp : Defines the entry point for the console application.
//
#include "stdafx.h"
#include <iostream>
#include <opencv2\core\core.hpp>
#include <opencv2\highgui\highgui.hpp>
#include <vector>
#include <math.h>
using namespace std;
using namespace cv;
Mat grey(Mat img)
{

	int m, n;

	Mat img2(img.rows, img.cols, CV_8UC1);
	for (m = 0; m < img.rows; m++)
	{
		for (n = 0; n < img.cols; n++)
		{
			img2.at<uchar>(m, n) = (56 * img.at<Vec3b>(m, n)[0] + 33 * img.at<Vec3b>(m, n)[1] + 11 * img.at<Vec3b>(m, n)[2]) / 100;

		}
	}
	return img2;
}
Mat edge1(Mat img)
{
	Mat img2(img.rows, img.cols, CV_8UC1, Scalar(0));
	int x = 0, y = 0, val = 0;
	for (int r = 0; r < img.rows; r++)
	{
		for (int c = 0; c < img.cols; c++)
		{
			if (r == 0 || c == 0 || r == img.rows - 1 || c == img.cols - 1)
			{

				continue;
			}

			x = img.at<uchar>(r - 1, c + 1) - img.at<uchar>(r - 1, c - 1) +
				2*img.at<uchar>(r, c + 1) - 2*img.at<uchar>(r, c - 1) +
				img.at<uchar>(r + 1, c + 1) - img.at<uchar>(r + 1, c - 1);

			y = img.at<uchar>(r + 1, c - 1) - img.at<uchar>(r - 1, c - 1) +
				2*img.at<uchar>(r + 1, c) - 2*img.at<uchar>(r - 1, c) +
				img.at<uchar>(r + 1, c + 1) - img.at<uchar>(r - 1, c + 1);

			val = (int)sqrt(x*x + y*y);
			if (val > 255)
				img2.at<uchar>(r, c) = 255;
			else if (val<0)
				img2.at<uchar>(r, c) = 0;
			else
				img2.at<uchar>(r, c) = val;
		}
	}
	return img2;
}
Mat edge2(Mat img)
{
	Mat img2(img.rows, img.cols, CV_8UC1, Scalar(0));
	int x = 0, y = 0, val = 0;
	for (int r = 0; r < img.rows; r++)
	{
		for (int c = 0; c < img.cols; c++)
		{
			if (r == 0 || c == 0 || r == img.rows - 1 || c == img.cols - 1)
			{

				continue;
			}

			x = img.at<uchar>(r - 1, c + 1) - img.at<uchar>(r - 1, c - 1) +
				img.at<uchar>(r, c + 1) -     img.at<uchar>(r, c - 1) +
				img.at<uchar>(r + 1, c + 1) - img.at<uchar>(r + 1, c - 1);

			y = img.at<uchar>(r + 1, c - 1) - img.at<uchar>(r - 1, c - 1) +
				img.at<uchar>(r + 1, c) -  img.at<uchar>(r - 1, c) +
				img.at<uchar>(r + 1, c + 1) - img.at<uchar>(r - 1, c + 1);

			val = (int)sqrt(x*x + y*y);
			if (val > 255)
				img2.at<uchar>(r, c) = 255;
			else if (val<0)
				img2.at<uchar>(r, c) = 0;
			else
				img2.at<uchar>(r, c) = val;
		}
	}
	return img2;
}

int main()
{
	Mat img;
	int thresh = 128;
	Mat img2,img3;
	namedWindow("original", CV_WINDOW_NORMAL);
	namedWindow("normal", CV_WINDOW_NORMAL);
	namedWindow("sobel", CV_WINDOW_NORMAL);
	VideoCapture v(0);
	while (1)
	{
		v >> img;
		img = grey(img);
		
		img2 = edge1(img);
		imshow("sobel", img2);
		img3 = edge2(img);
		imshow("normal", img3);
		char a=waitKey(10);
		if (a == 27)
			break;
	}
	return 0;
}


