
#include "stdafx.h"
#include <iostream>
#include <opencv2\core\core.hpp>
#include <opencv2\highgui\highgui.hpp>
#include <queue>
#include  <opencv2\imgproc\imgproc.hpp>
#include<vector>
using namespace std;
using namespace cv;

Mat analyse(int ***a, int hue, Mat img)                   //takes the array, converts it to an image using the 
{							 //value passed in hue and returns it
	Mat img2(img.rows, img.cols, CV_8UC1, Scalar(0));
	for (int r = 0; r < img2.rows; r++)
	{
		for (int c = 0; c < img.cols; c++)
		{
			if (a[r][c][1] == hue)
				img2.at<uchar>(r, c) = 255;
		}
	}
	return img2;
}
int*** blobit(Mat img, int *count)				//returns a 3d array with a[r][c][0] containing blob id 
{												//and a[r][c][1] containing hue value and also counts no of blobs
	int ***a = (int ***)malloc(img.rows*sizeof(int**));
	for (int m = 0; m < img.rows; m++)
	{
		a[m] = (int **)malloc(img.cols*sizeof(int*));
		for (int n = 0; n < img.cols; n++)
			a[m][n] = (int *)malloc(2 * sizeof(int));
	}
	for (int k = 0; k < img.rows; k++)
	{
		for (int l = 0; l < img.cols; l++)
		{
			a[k][l][0] = -1;
		}
	}

	int num = 1, m, n;
	queue<Point> q;
	for (int r = 0; r < img.rows; r++)
	{
		for (int c = 0; c < img.cols; c++)
		{
			if (img.at<Vec3b>(r, c)[1] != 255 && a[r][c][0] == -1)
			{
				Point p;
				p.x = r;
				p.y = c;
				q.push(p);
				a[r][c][0] = 0;
				m = r; n = c;
				while (1)
				{
					for (int k = m - 1; k <= m + 1; k++)
					{
						for (int l = n - 1; l <= n + 1; l++)
						{
							if (k<0 || l<0 || k>img.rows || l>img.cols)
								continue;
							if (img.at<Vec3b>(k, l)[1] != 255 && a[k][l][0] == -1)
							{
								Point p;
								p.x = k;
								p.y = l;
								q.push(p);
								a[k][l][0] = 0;
							}

						}
					}
					a[m][n][0] = num;
					q.pop();
					if (q.empty() == true)
						break;
					Point z = q.front();
					m = z.x;
					n = z.y;
				}
				num++;
			}

		}
	}
	*count = num - 1;
	for (int h = 0; h <= 360; h++)
	{
		for (int m = 0; m < img.rows; m++)
		{
			for (int n = 0; n < img.cols; n++)
			{
				if (a[m][n][0] != -1 && img.at<Vec3b>(m, n)[0] == h)
					a[m][n][1] = h;
			}
		}
	}


	return a;
}
int **calcy(Mat img, int***blob, int count)		//calculates the highest y coord of a blob and stores and returns it in an array
{												//y[i][0]-> blob id y[i][1]->row coord y[i][2]-> col coord
	int **y = new int*[count];
	for (int i = 0; i < count; i++)
	{
		y[i] = new int[4];
	}
	for (int i = 0; i < count; i++)
	{
		Point p;
		p.x = -1;
		p.y = -1;
		for (int r = 0; r < img.rows; r++)
		{
			for (int c = 0; c < img.cols; c++)
			{
				if (blob[r][c][0] == i + 1)
				{
					if (r>p.y)
					{
						p.y = r;
						p.x = c;
					}
				}

			}

		}
		if (p.y == -1)
			continue;
		y[i][0] = i + 1;
		y[i][1] = p.y;
		y[i][2] = p.x;
	}
	vector<vector<Point > > v;
	vector<Point > app;
	Mat img2;
	cvtColor(img, img2, CV_HLS2BGR);

	cvtColor(img2, img2, CV_BGR2GRAY);

	threshold(img2, img2, 254, 255, THRESH_BINARY_INV);

	findContours(img2.clone(), v, CV_RETR_CCOMP, CV_CHAIN_APPROX_SIMPLE);
	cout << v.size()<<"\n";
	for (int i = 0; i < v.size(); i++)
	{
		approxPolyDP(v[i], app, arcLength(v[i], true)*0.02, true);
		y[i][3] = app.size();
	}		
	return y;
}
Mat printpixel(Mat img, int **a, int count)					//prints the lowest pixel of each blob, returns the mat img
{															//containing only those pixels
	Mat img2(img.rows, img.cols, CV_8UC1, Scalar(0));
	for (int k = 0; k < count; k++)
	{
		for (int i = 0; i < img.rows; i++)
		{
			for (int j = 0; j < img.cols; j++)
			{
				if (a[k][1] == i && a[k][2] == j)
					img2.at<uchar>(i, j) = 255;
			}
		}
	}
	return img2;
}
Point* calculator(int *a,int** y,int count,int*** hues) //a[][0]->shape, a[][1]->hue  y-> ycoord, hues-> main array
{
	Point* point = new Point[count];
	Point pos;
	pos.x = 0;
	pos.y = 0;

	int counter = 0;
	for (int i = 0; i < count; i++)
	{
		for (int j = 0; j < count; j++)
		{
			if (pos.x < y[j][2] && a[i] == y[j][3])// && a[i][1] == hues[y[j][1]][y[j][2]][1])
			{
				counter++;
				pos.x = y[j][2];
				point[i].x = y[j][2];
				point[i].y = y[j][1];
			}

		}
	}
	for (int i = counter; i < count; i++)
	{
		point[i].x = -1;
		point[i].y = -1;
	}
	return point;
}
int main()
{
	Mat img;
	int m = 238;
	img = imread("C:\\Users\\ARANYA\\Desktop\\stuff\\IP\\proj\\pics\\5.bmp", CV_LOAD_IMAGE_COLOR);
	Mat img2;
	cvtColor(img, img2, CV_BGR2HLS);
	namedWindow("hsv", CV_WINDOW_AUTOSIZE);
	int count = 0;
	int*** blob = blobit(img2, &count);
	int **ycoord = calcy(img, blob, count);
	for (int i = 0; i < count; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			cout << ycoord[i][j] << " ";
		}
		cout << "\n";
	}
	img2 = printpixel(img, ycoord, count);
	imshow("hsv", img2);
	int c = 1;
	int  * a = new int[3];
	a[0]= 4; a[1] = 3; a[2] = 8; 
	Point* points = calculator(a, ycoord, count, blob);

	int x = 0;
	for (int i = 0; i < count; i++)
	{
		while (1)
		{
			if (points[i].y == -1)
				break;
			if (x == points[i].y)
			{
				cout << "\n catch\n";
				break;
			}
			if (x>points[i].y)
			{
				x--;
				cout << " s";
			}
			if (x<points[i].y)
			{
				x++;
				cout << " w";
			}
		}
	}
	waitKey(0);
	return 0;
} 